module key_decoder #(
    parameter CLK_FREQ = 50_000_000,   // 50MHz时钟
    parameter DEBOUNCE_MS = 20         // 消抖时间20ms
)(
    input wire sys_clk,                // 系统时钟
    input wire sys_rst_n,              // 复位（低有效）
    input wire key_s1, key_s2, key_s3, // 原始按键输入（低有效）
    output reg key_s1_pulse,           // S1消抖后的单脉冲（高有效）
    output reg key_s2_pulse,           // S2消抖后的单脉冲
    output reg key_s3_pulse            // S3消抖后的单脉冲
);

// 计算计数器最大值（20ms对应1,000,000周期）
localparam CNT_MAX = CLK_FREQ / 1000 * DEBOUNCE_MS;

// S1消抖逻辑
reg [19:0] cnt_s1;
reg key_s1_stable;

always @(posedge sys_clk or negedge sys_rst_n) begin
    if (!sys_rst_n) begin
        cnt_s1 <= 0;
        key_s1_stable <= 1'b1;       // 复位时按键默认为高电平（未按下）
        key_s1_pulse <= 1'b0;
    end else begin
        if (key_s1 == 1'b0) begin    // 按键按下（低有效）
            if (cnt_s1 < CNT_MAX)
                cnt_s1 <= cnt_s1 + 1;
            else
                key_s1_stable <= 1'b0; // 稳定按下状态
        end else begin
            cnt_s1 <= 0;
            key_s1_stable <= 1'b1;    // 按键松开
        end
        
        // 生成单脉冲（下降沿触发）
        key_s1_pulse <= (key_s1_stable && (cnt_s1 == CNT_MAX)) ? 1'b1 : 1'b0;
    end
end

// S2消抖逻辑（与S1完全对称）
reg [19:0] cnt_s2;
reg key_s2_stable;

always @(posedge sys_clk or negedge sys_rst_n) begin
    if (!sys_rst_n) begin
        cnt_s2 <= 0;
        key_s2_stable <= 1'b1;
        key_s2_pulse <= 1'b0;
    end else begin
        if (key_s2 == 1'b0) begin
            if (cnt_s2 < CNT_MAX)
                cnt_s2 <= cnt_s2 + 1;
            else
                key_s2_stable <= 1'b0;
        end else begin
            cnt_s2 <= 0;
            key_s2_stable <= 1'b1;
        end
        key_s2_pulse <= (key_s2_stable && (cnt_s2 == CNT_MAX)) ? 1'b1 : 1'b0;
    end
end

// S3消抖逻辑（与S1完全对称）
reg [19:0] cnt_s3;
reg key_s3_stable;

always @(posedge sys_clk or negedge sys_rst_n) begin
    if (!sys_rst_n) begin
        cnt_s3 <= 0;
        key_s3_stable <= 1'b1;
        key_s3_pulse <= 1'b0;
    end else begin
        if (key_s3 == 1'b0) begin
            if (cnt_s3 < CNT_MAX)
                cnt_s3 <= cnt_s3 + 1;
            else
                key_s3_stable <= 1'b0;
        end else begin
            cnt_s3 <= 0;
            key_s3_stable <= 1'b1;
        end
        key_s3_pulse <= (key_s3_stable && (cnt_s3 == CNT_MAX)) ? 1'b1 : 1'b0;
    end
end

endmodule
```
